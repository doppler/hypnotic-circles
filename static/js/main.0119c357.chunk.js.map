{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["svgDimensionsFromWindowSize","width","window","innerWidth","height","innerHeight","SixCircleGroup","_ref","center","rotate","react_default","a","createElement","style","transformOrigin","concat","x","y","transform","Array","from","length","map","_","i","angle","radian","Math","PI","cx","cos","cy","sin","Object","assign","key","r","fill","stroke","App","timeout","_useState","useState","_useState2","slicedToArray","_useState2$","setSvgDimensions","_useState3","_useState4","spinAngle","setSpinAngle","useEffect","clearTimeout","setTimeout","requestAnimationFrame","addEventListener","id","App_SixCircleGroup","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8NAGMA,SAA8B,iBAAO,CACzCC,MAAOC,OAAOC,WACdC,OAAQF,OAAOG,eAsDXC,EAAiB,SAAAC,GAAwB,IAArBC,EAAqBD,EAArBC,OAAQC,EAAaF,EAAbE,OAChC,OACEC,EAAAC,EAAAC,cAAA,KACEC,MAAO,CACLC,gBAAe,GAAAC,OAAKP,EAAOQ,EAAZ,OAAAD,OAAmBP,EAAOS,EAA1B,MACfC,UAAS,UAAAH,OAAYN,EAAZ,UAGVU,MAAMC,KAAK,CAAEC,OAAQ,IAAKC,IAAI,SAACC,EAAGC,GACjC,IAAIC,EAAQ,IAAMD,EAAI,GAClBE,EAAUD,EAAQE,KAAKC,GAAM,IAC7BC,EAAKrB,EAAOQ,EA9Dd,GA8DsBW,KAAKG,IAAIJ,GAC7BK,EAAKvB,EAAOS,EA/Dd,GA+DsBU,KAAKK,IAAIN,GACjC,OACEhB,EAAAC,EAAAC,cAAA,SAAAqB,OAAAC,OAAA,CACEC,IAAKX,GACD,CAAEK,KAAIE,KAAIK,EAnEhB,IAiEA,CAGEvB,MAAO,CACLwB,KAAI,QAAAtB,OAAUU,EAAQ,EAAlB,qBACJa,OAAM,OAAAvB,OAASU,EAAQ,EAAjB,sBAjBhB,MA0BWc,EA7EH,WAAM,IAOZC,EAPYC,EAC8BC,mBAC5C1C,KAFc2C,EAAAV,OAAAW,EAAA,EAAAX,CAAAQ,EAAA,GAAAI,EAAAF,EAAA,GACP1C,EADO4C,EACP5C,MAAOG,EADAyC,EACAzC,OAAU0C,EADVH,EAAA,GAAAI,EAKkBL,mBAAS,GAL3BM,EAAAf,OAAAW,EAAA,EAAAX,CAAAc,EAAA,GAKTE,EALSD,EAAA,GAKEE,EALFF,EAAA,GAwBhB,OAhBAG,oBAAU,WAKR,OAJAC,aAAaZ,GACbA,EAAUa,WAAW,WACnBC,sBAAsB,kBAAMJ,EAAaD,EAAY,MACpD,GACI,WACLG,aAAaZ,KAEd,CAACS,IAEJE,oBAAU,WACRjD,OAAOqD,iBAAiB,SAAU,WAChCT,EAAiB9C,MAElB,IAGDU,EAAAC,EAAAC,cAAA,OAAK4C,GAAG,OACN9C,EAAAC,EAAAC,cAAA,MAAS,CAAEX,QAAOG,UAChBM,EAAAC,EAAAC,cAAA,KAAGC,MAAO,CAAEK,UAAS,UAAAH,QAAakC,EAAb,UAClB9B,MAAMC,KAAK,CAAEC,OAAQ,IAAKC,IAAI,SAACC,EAAGC,GACjC,IACIE,EADQ,IAAMF,EAAI,GACAG,KAAKC,GAAM,IAC7BpB,EAAS,CACXQ,EAAGf,EAAQ,EAAImC,IAAQT,KAAKG,IAAIJ,GAChCT,EAAGb,EAAS,EAAIgC,IAAQT,KAAKK,IAAIN,IAEnC,OACEhB,EAAAC,EAAAC,cAAC6C,EAAD,CACEtB,IAAKX,EACLhB,OAAQA,EACRC,OAAqB,GAAKe,EAAjByB,UCrCLS,QACW,cAA7BxD,OAAOyD,SAASC,UAEe,UAA7B1D,OAAOyD,SAASC,UAEhB1D,OAAOyD,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0119c357.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\nconst svgDimensionsFromWindowSize = () => ({\n  width: window.innerWidth,\n  height: window.innerHeight\n});\n\nconst r = 50;\n\nconst App = () => {\n  const [{ width, height }, setSvgDimensions] = useState(\n    svgDimensionsFromWindowSize()\n  );\n\n  const [spinAngle, setSpinAngle] = useState(0);\n\n  let timeout;\n  useEffect(() => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => {\n      requestAnimationFrame(() => setSpinAngle(spinAngle + 1));\n    }, 1);\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [spinAngle]);\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", () => {\n      setSvgDimensions(svgDimensionsFromWindowSize);\n    });\n  }, []);\n\n  return (\n    <div id=\"App\">\n      <svg {...{ width, height }}>\n        <g style={{ transform: `rotate(${-spinAngle}deg)` }}>\n          {Array.from({ length: 6 }).map((_, i) => {\n            let angle = 60 * (i + 1);\n            let radian = (angle * Math.PI) / 180;\n            let center = {\n              x: width / 2 + r * 3 * Math.cos(radian),\n              y: height / 2 + r * 3 * Math.sin(radian)\n            };\n            return (\n              <SixCircleGroup\n                key={i}\n                center={center}\n                rotate={-spinAngle + 60 * i}\n              />\n            );\n          })}\n        </g>\n      </svg>\n    </div>\n  );\n};\n\nconst SixCircleGroup = ({ center, rotate }) => {\n  return (\n    <g\n      style={{\n        transformOrigin: `${center.x}px ${center.y}px`,\n        transform: `rotate(${rotate}deg)`\n      }}\n    >\n      {Array.from({ length: 6 }).map((_, i) => {\n        let angle = 60 * (i + 1);\n        let radian = (angle * Math.PI) / 180;\n        let cx = center.x + r * Math.cos(radian);\n        let cy = center.y + r * Math.sin(radian);\n        return (\n          <circle\n            key={i}\n            {...{ cx, cy, r }}\n            style={{\n              fill: `hsla(${angle / 6}, 100%, 25%, 0.1)`,\n              stroke: `hsl(${angle / 6}, 100%, 50%)`\n            }}\n          />\n        );\n      })}\n      ;\n    </g>\n  );\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nif (module.hot) module.hot.accept();\n"],"sourceRoot":""}